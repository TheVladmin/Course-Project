{
	"info": {
		"_postman_id": "a5c031f5-7f2f-4b06-b246-0d52994126c0",
		"name": "Course Project collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44636989",
		"_collection_link": "https://solar-flare-1626936.postman.co/workspace/Vlad_r_d's-Workspace~8c7eb4f9-b26a-4436-8bcc-e6e9082a2d55/collection/44636989-a5c031f5-7f2f-4b06-b246-0d52994126c0?action=share&source=collection_link&creator=44636989"
	},
	"item": [
		{
			"name": "Get Tasks",
			"item": [
				{
					"name": "Get Tasks Positive tests",
					"item": [
						{
							"name": "Get Tasks / Create Task 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Create Task 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name2 = pm.collectionVariables.get(\"Task2_random_name\");\r",
											"var T_description2 = pm.collectionVariables.get(\"Task2_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name2}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name2);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description2}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description2);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task2_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name2 = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task2_random_name\", name2);\r",
											"\r",
											"var description2 = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task2_random_description\", description2);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task2_random_name}}\",\r\n    \"content\": \"{{Task2_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Get Tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"var T_name2 = pm.collectionVariables.get(\"Task2_random_name\");\r",
											"var T_description2 = pm.collectionVariables.get(\"Task2_random_description\");\r",
											"\r",
											"pm.test(`Check that task 1 name is \"${T_name}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tasks[1].name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task 1 description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tasks[1].description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task 2 name is \"${T_name2}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tasks[0].name).to.eql(T_name2);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task 2 description is \"${T_description2}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tasks[0].description).to.eql(T_description2); \r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"     type: \"object\",\r",
											"        required: [\"tasks\", \"last_page\"],\r",
											"        properties: {\r",
											"            tasks: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"name\", \"text_content\", \"description\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"string\" },\r",
											"                        custom_id: { type: [\"string\", \"null\"] },\r",
											"                        custom_item_id: { type: \"number\" },\r",
											"                        name: { type: \"string\" },\r",
											"                        text_content: { type: \"string\" },\r",
											"                        description: { type: \"string\" },\r",
											"                        status: {\r",
											"                            type: \"object\",\r",
											"                            required: [\"id\", \"status\", \"color\", \"type\", \"orderindex\"],\r",
											"                            properties: {\r",
											"                                id: { type: \"string\" },\r",
											"                                status: { type: \"string\" },\r",
											"                                color: { type: \"string\" },\r",
											"                                type: { type: \"string\" },\r",
											"                                orderindex: { type: \"number\" }\r",
											"                            }\r",
											"                        },\r",
											"                        orderindex: { type: \"string\" },\r",
											"                        date_created: { type: \"string\" },\r",
											"                        date_updated: { type: \"string\" },\r",
											"                        date_closed: { type: [\"string\", \"null\"] },\r",
											"                        date_done: { type: [\"string\", \"null\"] },\r",
											"                        archived: { type: \"boolean\" },\r",
											"                        creator: {\r",
											"                            type: \"object\",\r",
											"                            required: [\"id\", \"username\", \"email\"],\r",
											"                            properties: {\r",
											"                                id: { type: \"number\" },\r",
											"                                username: { type: \"string\" },\r",
											"                                color: { type: \"string\" },\r",
											"                                email: { type: \"string\" },\r",
											"                                profilePicture: { type: [\"string\", \"null\"] }\r",
											"                            }\r",
											"                        },\r",
											"                        assignees: { type: \"array\" },\r",
											"                        group_assignees: { type: \"array\" },\r",
											"                        watchers: {\r",
											"                            type: \"array\",\r",
											"                            items: {\r",
											"                                type: \"object\",\r",
											"                                required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                                properties: {\r",
											"                                    id: { type: \"number\" },\r",
											"                                    username: { type: \"string\" },\r",
											"                                    color: { type: \"string\" },\r",
											"                                    initials: { type: \"string\" },\r",
											"                                    email: { type: \"string\" },\r",
											"                                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                                }\r",
											"                            }\r",
											"                        },\r",
											"                        checklists: { type: \"array\" },\r",
											"                        tags: { type: \"array\" },\r",
											"                        parent: { type: [\"string\", \"null\"] },\r",
											"                        top_level_parent: { type: [\"string\", \"null\"] },\r",
											"                        priority: { type: [\"object\", \"null\"] },\r",
											"                        due_date: { type: [\"string\", \"null\"] },\r",
											"                        start_date: { type: [\"string\", \"null\"] },\r",
											"                        points: { type: [\"number\", \"null\"] },\r",
											"                        time_estimate: { type: [\"number\", \"null\"] },\r",
											"                        time_spent: { type: [\"number\", \"null\"] },\r",
											"                        custom_fields: { type: \"array\" },\r",
											"                        dependencies: { type: \"array\" },\r",
											"                        linked_tasks: { type: \"array\" },\r",
											"                        locations: { type: \"array\" },\r",
											"                        team_id: { type: \"string\" },\r",
											"                        url: { type: \"string\" },\r",
											"                        sharing: {\r",
											"                            type: \"object\",\r",
											"                            required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                            properties: {\r",
											"                                public: { type: \"boolean\" },\r",
											"                                public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                                public_fields: {\r",
											"                                    type: \"array\",\r",
											"                                    items: { type: \"string\" }\r",
											"                                },\r",
											"                                token: { type: [\"string\", \"null\"] },\r",
											"                                seo_optimized: { type: \"boolean\" }\r",
											"                            }\r",
											"                        },\r",
											"                        permission_level: { type: \"string\" },\r",
											"                        list: {\r",
											"                            type: \"object\",\r",
											"                            required: [\"id\", \"name\", \"access\"],\r",
											"                            properties: {\r",
											"                                id: { type: \"string\" },\r",
											"                                name: { type: \"string\" },\r",
											"                                access: { type: \"boolean\" }\r",
											"                            }\r",
											"                        },\r",
											"                        project: {\r",
											"                            type: \"object\",\r",
											"                            required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                            properties: {\r",
											"                                id: { type: \"string\" },\r",
											"                                name: { type: \"string\" },\r",
											"                                hidden: { type: \"boolean\" },\r",
											"                                access: { type: \"boolean\" }\r",
											"                            }\r",
											"                        },\r",
											"                        folder: {\r",
											"                            type: \"object\",\r",
											"                            required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                            properties: {\r",
											"                                id: { type: \"string\" },\r",
											"                                name: { type: \"string\" },\r",
											"                                hidden: { type: \"boolean\" },\r",
											"                                access: { type: \"boolean\" }\r",
											"                            }\r",
											"                        },\r",
											"                        space: {\r",
											"                            type: \"object\",\r",
											"                            required: [\"id\"],\r",
											"                            properties: {\r",
											"                                id: { type: \"string\" }\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            last_page: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Delete Task 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Delete Task 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task2_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Tasks Negative tests",
					"item": [
						{
							"name": "Get Tasks / Create Task 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Create Task 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name2 = pm.collectionVariables.get(\"Task2_random_name\");\r",
											"var T_description2 = pm.collectionVariables.get(\"Task2_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name2}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name2);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description2}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description2);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task2_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name2 = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task2_random_name\", name2);\r",
											"\r",
											"var description2 = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task2_random_description\", description2);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task2_random_name}}\",\r\n    \"content\": \"{{Task2_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Get Tasks  / invaid list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_027\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/123123123/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"123123123",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Get Tasks  / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_025\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_8T3GZ6VOI0YO22G7GLFG8UAMI3XA6K23",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Delete Task 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks / Delete Task 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task2_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Create Task",
			"item": [
				{
					"name": "Create Task Positive tests",
					"item": [
						{
							"name": "Create Task  / Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Get Created Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task 1 name is \"${T_name}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task 1 description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task / Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Task Negative tests",
					"item": [
						{
							"name": "Create Task / Create Task / invalid list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_027\");\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test_List_1\",\r\n    \"content\": \"List1_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/123/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"123",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task / Delete Task / invalid list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_027\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{List_Negative_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{List_Negative_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task / Create Task / without name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Task name invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"INPUT_005\");\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List_Negative_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"List1_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task / Delete Task / without name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"validateListIDEx List ID invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"INPUT_003\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List_Negative_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List_Negative_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task / Create Task / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_025\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List_Negative_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_8T3GZ6VOI0YO22G7GLFG8UAMI3XA6K4I",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test_List_1\",\r\n    \"content\": \"List1_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task / Delete Task / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"validateListIDEx List ID invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"INPUT_003\");\r",
											"});\r",
											"\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List_Negative_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List_Negative_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get Task",
			"item": [
				{
					"name": "Get Task Positive tests",
					"item": [
						{
							"name": "Get  Task  / Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Task/ Get Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task 1 name is \"${T_name}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task 1 description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Task / Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Task Negative tests",
					"item": [
						{
							"name": "Get  Task  / Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Task / Get Task / invaid task_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_027\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/task/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List / Get List / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_025\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_8T3GZ6VOI0YO22G7GLFG8UAMI3X36K2I",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Task / Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Update Task",
			"item": [
				{
					"name": "Update Task Positive tests",
					"item": [
						{
							"name": "Update Task  / Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task / Update Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"UPD_Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"UPD_Task_random_description\");\r",
											"\r",
											"pm.test(`Check that updated list name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that updated list content is \"${T_description}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"   type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var upd_name = pm.variables.replaceIn('Updated {{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"UPD_Task_random_name\", upd_name);\r",
											"\r",
											"var upd_description = pm.variables.replaceIn('Updated {{$randomWords}}');\r",
											"pm.collectionVariables.set(\"UPD_Task_random_description\", upd_description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{UPD_Task_random_name}}\",\r\n    \"content\": \"{{UPD_Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task / Get Updated Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"UPD_Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"UPD_Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task 1 name is \"${T_name}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task 1 description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task / Delete Updated Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Task Negative tests",
					"item": [
						{
							"name": "Update Task  / Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task / Update Task / with empty name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"List Name Invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"SUBCAT_020\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task / Update Task / with invalid task _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_027\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if response is JSON\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.include(\"application/json\", \"Response is not JSON\");\r",
											"});\r",
											"\r",
											"\r",
											"const response = pm.response.json();\r",
											"if (pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {\r",
											"    const Ajv = require('ajv');\r",
											"    const ajv = new Ajv();\r",
											"\r",
											"    var schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"err\": { \"type\": \"string\" },\r",
											"            \"ECODE\": { \"type\": \"string\" },\r",
											"        },\r",
											"        \"required\": [\"err\", \"ECODE\"]\r",
											"    };\r",
											"\r",
											"    const validate = ajv.compile(schema);\r",
											"\r",
											"    pm.test(\"Check that response schema is valid\", function () {\r",
											"        const valid = validate(response);\r",
											"        pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Response is not JSON\", function () {\r",
											"        pm.expect.fail(\"Expected JSON response, but got HTML or other content type\");\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updated_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/task/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task  / Update Task / with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_025\");\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_7T3GZ6VOI0YO22G7GLFG8UAMI5XA6K2O",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updated_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task / Delete Updated Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete Task",
			"item": [
				{
					"name": "Delete Task Positive tests",
					"item": [
						{
							"name": "Delete Task  / Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task / Get Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task 1 name is \"${T_name}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task 1 description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task / Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Task Negative tests",
					"item": [
						{
							"name": "Delete Task  / Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task name is \"${T_name}\"`, function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"Task1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"text_content\", \"status\", \"creator\", \"watchers\", \"team_id\", \"url\", \"sharing\", \"permission_level\", \"list\", \"project\", \"folder\", \"space\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            custom_id: { type: [\"string\", \"null\"] },\r",
											"            custom_item_id: { type: \"number\" },\r",
											"            name: { type: \"string\" },\r",
											"            text_content: { type: \"string\" },\r",
											"            description: { type: [\"string\", \"null\"] },\r",
											"            status: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"status\", \"color\", \"orderindex\", \"type\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    status: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    orderindex: { type: \"number\" },\r",
											"                    type: { type: \"string\" }\r",
											"                }\r",
											"            },\r",
											"            orderindex: { type: \"string\" },\r",
											"            date_created: { type: \"string\" },\r",
											"            date_updated: { type: \"string\" },\r",
											"            date_closed: { type: [\"string\", \"null\"] },\r",
											"            date_done: { type: [\"string\", \"null\"] },\r",
											"            archived: { type: \"boolean\" },\r",
											"            creator: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"username\", \"email\"],\r",
											"                properties: {\r",
											"                    id: { type: \"number\" },\r",
											"                    username: { type: \"string\" },\r",
											"                    color: { type: \"string\" },\r",
											"                    email: { type: \"string\" },\r",
											"                    profilePicture: { type: [\"string\", \"null\"] }\r",
											"                }\r",
											"            },\r",
											"            assignees: { type: \"array\" },\r",
											"            group_assignees: { type: \"array\" },\r",
											"            watchers: {\r",
											"                type: \"array\",\r",
											"                items: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"username\", \"email\", \"initials\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        username: { type: \"string\" },\r",
											"                        color: { type: \"string\" },\r",
											"                        initials: { type: \"string\" },\r",
											"                        email: { type: \"string\" },\r",
											"                        profilePicture: { type: [\"string\", \"null\"] }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            checklists: { type: \"array\" },\r",
											"            tags: { type: \"array\" },\r",
											"            parent: { type: [\"string\", \"null\"] },\r",
											"            top_level_parent: { type: [\"string\", \"null\"] },\r",
											"            priority: { type: [\"object\", \"null\"] },\r",
											"            due_date: { type: [\"string\", \"null\"] },\r",
											"            start_date: { type: [\"string\", \"null\"] },\r",
											"            points: { type: [\"number\", \"null\"] },\r",
											"            time_estimate: { type: [\"number\", \"null\"] },\r",
											"            time_spent: { type: \"number\" },\r",
											"            custom_fields: { type: \"array\" },\r",
											"            dependencies: { type: \"array\" },\r",
											"            linked_tasks: { type: \"array\" },\r",
											"            locations: { type: \"array\" },\r",
											"            team_id: { type: \"string\" },\r",
											"            url: { type: \"string\" },\r",
											"            sharing: {\r",
											"                type: \"object\",\r",
											"                required: [\"public\", \"public_fields\", \"seo_optimized\"],\r",
											"                properties: {\r",
											"                    public: { type: \"boolean\" },\r",
											"                    public_share_expires_on: { type: [\"string\", \"null\"] },\r",
											"                    public_fields: {\r",
											"                        type: \"array\",\r",
											"                        items: { type: \"string\" }\r",
											"                    },\r",
											"                    token: { type: [\"string\", \"null\"] },\r",
											"                    seo_optimized: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            permission_level: { type: \"string\" },\r",
											"            list: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            project: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            folder: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\", \"name\", \"hidden\", \"access\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" },\r",
											"                    name: { type: \"string\" },\r",
											"                    hidden: { type: \"boolean\" },\r",
											"                    access: { type: \"boolean\" }\r",
											"                }\r",
											"            },\r",
											"            space: {\r",
											"                type: \"object\",\r",
											"                required: [\"id\"],\r",
											"                properties: {\r",
											"                    id: { type: \"string\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"};\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"Task_random_name\", name);\r",
											"\r",
											"var description = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"Task_random_description\", description);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Task_random_name}}\",\r\n    \"content\": \"{{Task_random_description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{list_id}}/task",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{list_id}}",
										"task"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task / Delete Task / invalid task _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_027\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/task/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task / Get Task / invalid task_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task / Delete Task / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.err).to.eql(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ECODE).to.eql(\"OAUTH_025\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_8T3GZ6VOI0YO22G7GLFG8UAMI3X36K2I",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task / Get Task / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var T_name = pm.collectionVariables.get(\"Task_random_name\");\r",
											"var T_description = pm.collectionVariables.get(\"Task_random_description\");\r",
											"\r",
											"pm.test(`Check that task 1 name is \"${T_name}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(T_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that task 1 description is \"${T_description}\"`, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(T_description);\r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task / Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/task/{{Task1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"task",
										"{{Task1_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Task_random_name",
			"value": ""
		},
		{
			"key": "Task_random_description",
			"value": ""
		},
		{
			"key": "Task1_id",
			"value": ""
		},
		{
			"key": "Task2_random_name",
			"value": ""
		},
		{
			"key": "Task2_random_description",
			"value": ""
		},
		{
			"key": "Task2_id",
			"value": ""
		},
		{
			"key": "List_Negative_id",
			"value": "null"
		},
		{
			"key": "UPD_List_random_name",
			"value": ""
		},
		{
			"key": "UPD_List_random_content",
			"value": ""
		},
		{
			"key": "List1_id",
			"value": ""
		},
		{
			"key": "UPD_Task_random_name",
			"value": ""
		},
		{
			"key": "UPD_Task_random_description",
			"value": ""
		}
	]
}